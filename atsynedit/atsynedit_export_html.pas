unit ATSynEdit_Export_HTML;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, Graphics, StrUtils,
  ATSynEdit,
  ATSynEdit_CanvasProc,
  ATStringProc;

procedure DoEditorExportToHTML(Ed: TATSynEdit;
  const AFilename, APageTitle, AFontName: string;
  AFontSize: integer; AWithNumbers: boolean; AColorBg: TColor);

implementation

procedure DoEditorExportToHTML(Ed: TATSynEdit;
  const AFilename, APageTitle, AFontName: string;
  AFontSize: integer; AWithNumbers: boolean; AColorBg: TColor);
var
  F: TextFile;
  Parts: TATLineParts;
  PPart: ^TATLinePart;
  NColorFont: TColor;
  NColorAfter: TColor;
  NeedStyle: boolean;
  Str: string;
  i, j: integer;
begin
  NColorFont:= clBlack;
  FillChar(Parts, Sizeof(Parts), 0);

  if FileExists(AFilename) then
    DeleteFile(AFilename);

  AssignFile(F, AFilename);
  {$I-} Rewrite(F); {$I+}
  if IOResult<>0 then exit;

  Writeln(F, '<!-- Generated by ATSynEdit Exporter -->');
  Writeln(F, '<html>'+sLineBreak+
             '<head>'+sLineBreak+
             '  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />'+sLineBreak+
             '  <title>'+APageTitle+'</title>'+sLineBreak+
             '  <style>'+sLineBreak+
             '    body, table {'+sLineBreak+
             '      color: '+SColorToHtmlColor(NColorFont)+';'+sLineBreak+
             '      background-color: '+SColorToHtmlColor(AColorBg)+';'+sLineBreak+
             '    }'+sLineBreak+
             '    pre, code {'+sLineBreak+
             '      font-family: "'+AFontName+'", sans-serif;'+sLineBreak+
             '      font-size: '+IntToStr(AFontSize)+'px;'+sLineBreak+
             '    }'+sLineBreak+
             '    table, td {'+sLineBreak+
             '      border-style: hidden;'+sLineBreak+
             '    }'+sLineBreak+
             '    td {'+sLineBreak+
             '      vertical-align: top;'+sLineBreak+
             '    }'+sLineBreak+
             '    td.num {'+sLineBreak+
             '      color: '+SColorToHtmlColor(Ed.Colors.GutterFont)+';'+sLineBreak+
             '      text-align: right;'+sLineBreak+
             '    }'+sLineBreak+
             '  </style>'+sLineBreak+
             '</head>'+sLineBreak+
             '<body>');

  if AWithNumbers then
  begin
    Writeln(F, '<table>'+sLineBreak+'<tr>'+sLineBreak+'<td class="num">');
    Write(F, '<pre><code>');
    for i:= 0 to Ed.Strings.Count-1 do
      Writeln(F, IntToStr(i+1)+'&nbsp;&nbsp;');
    Writeln(F, '</code></pre>');
    Writeln(F, '</td>'+sLineBreak+'<td>');
  end;

  Write(F, '<pre><code>');

  for i:= 0 to Ed.Strings.Count-1 do
  begin
    if not Ed.DoCalcLineHiliteEx(i, Parts, AColorBG, NColorAfter) then break;
    for j:= 0 to High(Parts) do
    begin
      PPart:= @Parts[j];
      if PPart^.Len=0 then Break;
      if PPart^.FontBold then Write(F, '<b>');
      if PPart^.FontItalic then Write(F, '<i>');
      if PPart^.FontStrikeOut then Write(F, '<s>');

      NeedStyle:=
        (PPart^.ColorFont<>NColorFont) or
        (PPart^.ColorBG<>AColorBG);
      if NeedStyle then
        Write(F, '<span style="'+
          IfThen(PPart^.ColorFont<>NColorFont, 'color: '+SColorToHtmlColor(PPart^.ColorFont)+'; ')+
          IfThen(PPart^.ColorBG<>AColorBG, 'background: '+SColorToHtmlColor(PPart^.ColorBG)+'; ')+
          '">');

      Str:= Utf8Encode(Copy(Ed.Strings.Lines[i], PPart^.Offset+1, PPart^.Len));
      Str:= StringReplace(Str, '<', '&lt;', [rfReplaceAll]);
      Str:= StringReplace(Str, '>', '&gt;', [rfReplaceAll]);
      Write(F, Str);
      if NeedStyle then
        Write(F, '</span>');

      if PPart^.FontStrikeOut then Write(F, '</s>');
      if PPart^.FontItalic then Write(F, '</i>');
      if PPart^.FontBold then Write(F, '</b>');
    end;
    Writeln(F);
  end;

  Writeln(F, '</code></pre>');
  if AWithNumbers then
    Writeln(F, '</td></tr></table>');

  Writeln(F, '</body>');
  Writeln(F, '</html>');
  CloseFile(F);
end;

end.

